/*
 * TCSS 305 Autumn 2018
 * Assignment 1
 */

package tests;

import static org.junit.Assert.*;

import java.awt.Color;
import java.awt.geom.Point2D;
import org.junit.Before;
import org.junit.Test;
import shapes.Circle;

/**
 * The contains tests of the circle class.
 * 
 * @author Michael Zachary Loria
 * @version October 10 2018
 */
public class CircleTest
{
    /**
     * This is the tolerance that is used when comparing doubles.
     */
    private static final double TOLERANCE = .000001;

    /**
     * The circle that will be used in the tests.
     */
    private Circle myCircle;

    /**
     * This is the method that initializes myCircle before each test.
     */
    @Before // This method runs before each test.
    public void setUp()
    {
        myCircle = new Circle();
    }

    /**
     * Test method for {Circle(final double theRadius, final Point2D theCenter,
     * final Color theColor) when the theRadius is less than 0}.
     */
    @Test(expected = IllegalArgumentException.class)
    public void testCircleNegativeRadius()
    {
        new Circle(-2.0, new Point2D.Double(0.0, 0.0), Color.BLACK);
    }

    /**
     * Test method for {@link shapes.Circle#setRadius(double)}.
     */
    @Test
    public void testSetRadius()
    {
        myCircle.setRadius(7);
        assertEquals(7, myCircle.getRadius(), TOLERANCE);

        final Circle c1 = new Circle(9.9, new Point2D.Double(1.5, 6.5), Color.CYAN);
        c1.setRadius(5.99);
        assertEquals(5.99, c1.getRadius(), TOLERANCE);
    }

    /**
     * Test method for {@testSetRadius() when the argument is less than 0}.
     */
    @Test(expected = IllegalArgumentException.class)
    public void testSetRadiusNegative()
    {
        myCircle.setRadius(-55);
    }

    /**
     * Test method for {@link shapes.Circle#setCenter(java.awt.geom.Point2D)}.
     */
    @Test
    public void testSetCenter()
    {
        myCircle.setCenter(new Point2D.Double(5.5, 3.5));
        assertEquals(new Point2D.Double(5.5, 3.5), myCircle.getCenter());
    }

    /**
     * Test method for {@link shapes.Circle#setColor(java.awt.Color)}.
     */
    @Test
    public void testSetColor()
    {
        myCircle.setColor(Color.RED);
        assertSame(Color.RED, myCircle.getColor());
    }

    /**
     * Test method for {@link shapes.Circle#calculateDiameter()}.
     */
    @Test
    public void testCalculateDiameter()
    {
        myCircle.setRadius(9);
        assertEquals(18, myCircle.calculateDiameter(), TOLERANCE);
    }

    /**
     * Test method for {@link shapes.Circle#calculateCircumference()}.
     */
    @Test
    public void testCalculateCircumference()
    {
        myCircle.setRadius(25);
        assertEquals(2 * myCircle.getRadius() * Math.PI, myCircle.calculateCircumference(),
                     TOLERANCE);
    }

    /**
     * Test method for {@link shapes.Circle#calculateArea()}.
     */
    @Test
    public void testCalculateArea()
    {
        myCircle.setRadius(4);
        assertEquals(Math.pow(myCircle.getRadius(), 2) * Math.PI, myCircle.calculateArea(),
                     TOLERANCE);
    }

    /**
     * Test method for {@link shapes.Circle#toString()}.
     */
    @Test
    public void testToString()
    {
        assertEquals("Circle [radius=1.00, center=Point2D.Double[0.0, 0.0], "
                        + "color=java.awt.Color[r=0,g=0,b=0]]", myCircle.toString());
    }

}
